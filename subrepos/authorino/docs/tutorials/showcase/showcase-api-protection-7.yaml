apiVersion: authorino.3scale.net/v1beta1
kind: AuthConfig
metadata:
  name: talker-api-protection
spec:
  hosts:
    - talker-api-authorino.127.0.0.1.nip.io:8000
  identity:
    - name: same-k8s-server-users
      kubernetes:
        audiences:
          - talker
    - name: friends
      apiKey:
        labelSelectors:
          authorino.3scale.net/managed-by: authorino
          custom-label: friends
    - name: beta-testers
      apiKey:
        labelSelectors:
          authorino.3scale.net/managed-by: authorino
          group: beta-testers
    - name: keycloak-users
      oidc:
        endpoint: http://keycloak:8080/auth/realms/kuadrant
  metadata:
    - name: resource-data
      uma:
        endpoint: http://keycloak:8080/auth/realms/kuadrant
        credentialsRef:
          name: uma-credentials-secret
  authorization:
    - name: friends-cannot-delete
      json:
        conditions:
          - selector: auth.identity.metadata.labels.custom-label
            operator: eq
            value: friends
        rules:
          - selector: context.request.http.method
            operator: neq
            value: DELETE
    - name: short-lived-api-keys-for-beta-testers
      opa:
        inlineRego: |
          identityMetadata = object.get(input.auth.identity, "metadata", {})
          group = object.get(object.get(identityMetadata, "labels", {}), "group", "")

          allow {
            creationTimestampStr := identityMetadata.creationTimestamp
            creationTimestamp := time.parse_rfc3339_ns(creationTimestampStr)
            durationNs := time.now_ns() - creationTimestamp
            durationDays := (durationNs/1000000000)/86400

            durationDays <= 5
            group == "beta-testers"
          }

          allow {
            group != "beta-testers"
          }
    - name: only-admins-say-hello
      json:
        conditions:
          - selector: auth.identity.iss
            operator: eq
            value: http://keycloak:8080/auth/realms/kuadrant
          - selector: context.request.http.path
            operator: eq
            value: /hello
        rules:
          - selector: auth.identity.realm_access.roles
            operator: incl
            value: admin
    - name: owned-resources
      opa:
        inlineRego: |
          issuer = object.get(input.auth.identity, "iss", "")
          http_request = input.context.request.http
          request_path = split(trim_left(http_request.path, "/"), "/")

          keycloak { issuer == "http://keycloak:8080/auth/realms/kuadrant" }
          not_keycloak { issuer != "http://keycloak:8080/auth/realms/kuadrant" }

          put { http_request.method == "PUT" }
          not_put { http_request.method != "PUT" }

          owned_resource { some id; request_path = ["greetings", id] }
          not_owned_resource { request_path = ["greetings"] }
          not_owned_resource { request_path = ["hello"] }
          not_owned_resource { request_path = ["goodbye"] }

          put_owned_resource { put; owned_resource }

          identity_owns_the_resource {
            resource := object.get(input.auth.metadata, "resource-data", [])[0]
            resource.owner.id == input.auth.identity.sub
          }

          allow { not_keycloak }
          allow { keycloak; not_owned_resource }
          allow { keycloak; owned_resource; not_put }
          allow { keycloak; put_owned_resource; identity_owns_the_resource }
---
apiVersion: v1
kind: Secret
metadata:
  name: uma-credentials-secret
stringData:
  clientID: talker-api
  clientSecret: 523b92b6-625d-4e1e-a313-77e7a8ae4e88
type: Opaque
